🧠 Problem:
In my JavaScript QR scanning app hosted on Replit, when I press the camera scan button on mobile:

- The phone requests camera permission (✅ granted)
- But instead of showing the **live camera feed**, it shows the **file upload UI**
- File upload scanning works perfectly
- Camera feed never appears, and `<video>` element doesn't show live stream

🎯 Objective:
Fix the camera mode behavior so that when a user presses the "Scan with Camera" button:
- ✅ Camera permission is requested
- ✅ `<video>` element becomes visible
- ✅ `getUserMedia()` stream connects to `<video>`
- ✅ File upload UI stays hidden
- ✅ `requestAnimationFrame(scan)` loop begins to scan frames

📋 Here's what I need from you:
1. ✅ Audit the code for race conditions in the camera mode toggle
2. ✅ Fix `video.srcObject = stream` setup — ensure stream assignment and `.play()` are actually triggering
3. ✅ Check the order: permission → UI update → stream connect → scan loop
4. ✅ Ensure UI toggle is DOM-safe: video shown, file hidden
5. ✅ Make sure this works reliably on mobile Chrome + Safari
6. ✅ Add full console debug logging:

```js
console.log("🔁 Camera button pressed");
console.log("✅ Camera permission granted");
console.log("🎥 Video stream connected");
console.log("📡 Scan loop started");
✅ Auto fallback: If video stream fails, switch back to file input and show toast

📦 Bonus:

Add video.setAttribute("playsinline", true) for iOS

Use video.readyState === 4 before drawing

Add timeout fail-safe if video.srcObject not set within 3 seconds

🛠️ Sample bug trigger:
This may happen when:

video tag is not visible despite stream being connected

UI toggles back to file mode prematurely

async timing is broken and video.play() doesn’t trigger scan

🧪 Please fix the flow and print all critical lifecycle logs.

yaml
Copy
Edit

---

### 🧰 Manual Checklist (if debugging yourself):

| Step | Fix | Code Snippet |
|------|-----|--------------|
| ✅ 1 | Ensure `video` is visible | `video.style.display = "block"; fileButton.style.display = "none";` |
| ✅ 2 | `playsinline` for mobile | `video.setAttribute("playsinline", true);` |
| ✅ 3 | Await stream | `video.srcObject = await navigator.mediaDevices.getUserMedia({ video: true })` |
| ✅ 4 | Start scanning only after `.play()` | `video.onloadedmetadata = () => requestAnimationFrame(scanLoop);` |
| ✅ 5 | Clear fallback modes | Remove `file input` focus if camera starts |

---

### 🧪 Add Debug Logs in `cameraModeHandler()`

```js
console.log("📸 Camera scan requested");
navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } })
.then(stream => {
  console.log("🎥 Stream granted");
  video.srcObject = stream;
  video.setAttribute("playsinline", true);
  video.play();
  cameraModeActive = true;
  fileInput.style.display = "none";
  video.style.display = "block";
  requestAnimationFrame(scanFrame);
})
.catch(err => {
  console.error("🚫 Camera access denied", err);
  fileInput.style.display = "block";
  video.style.display = "none";
});
🛡️ Tip: On Mobile Browsers
Use touchstart instead of click for UI buttons

Set playsinline, autoplay, and muted on <video>

Wrap video in a visible div container that’s toggled

html
Copy
Edit
<video id="cameraFeed" autoplay muted playsinline></video>