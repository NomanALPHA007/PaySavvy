Objective: Build a full, modular, scalable, AI-powered scam link detection web app called PaySavvy that fulfills all PayHack 2025 requirements, using Vite, HTML/CSS/JS, localStorage, and OpenAI API, with optional Firebase integration and Vercel deployment structure.

📌 PROMPT FOR REPLIT AI
Paste the following into Replit's “Ask AI” or Chat input box:

plaintext
Copy
Edit
You are a senior AI web engineer. I want you to help me build and deploy a complete cybersecurity web app called **PaySavvy**, designed to detect scam payment URLs using AI and rule-based logic.

It must be a full MVP structured using:

- ✅ HTML, CSS, JavaScript (modular with Vite)
- ✅ Optional GPT-3.5 OpenAI API integration
- ✅ Offline fallback logic (pattern only)
- ✅ localStorage-based personalization
- ✅ Modular file structure for GitHub + Vercel

---

### 🧱 DIRECTORY STRUCTURE

Set up the following folders and files:

📁 PaySavvy
├── public/
│ └── index.html
├── src/
│ ├── assets/
│ ├── data/
│ │ ├── brandList.json
│ │ └── countryMap.json
│ ├── styles/
│ │ └── style.css
│ ├── utils/
│ │ ├── language.js
│ │ ├── regexRules.js
│ │ └── fallback.js
│ ├── main.js
│ └── ai.js
├── .env (with OPENAI_API_KEY)
├── vite.config.js
├── package.json

css
Copy
Edit

---

### 🔐 FUNCTIONAL MODULES

**1. URL Input + Scan Button**
- Main input to paste suspicious link.
- Button triggers full analysis.

**2. Risk Detection Logic**
- Regex pattern scan for scammy TLDs, keywords, known fake brands.
- Rule matches added to a flag list.
- Example:
```js
if (url.includes(".tk")) flags.push("Scammy TLD");
3. GPT-3.5 API Analysis (ai.js)

Fetch GPT response with prompt:

“Is this link safe for Malaysian digital payment users?”

Return Risk Level + Reason + Matched patterns.

4. Offline Mode Fallback (fallback.js)

Use navigator.onLine to check status.

If offline: skip AI, only use regex-based detection.

Display offline banner.

5. Preferences Panel (localStorage)

Save:

Preferred banks (Maybank, Boost, CIMB)

Language (EN/BM)

Scan history

Alert if scam link doesn’t match user’s known banks.

6. Language Toggle (language.js)

Basic i18n dictionary

Toggle UI content based on localStorage.language

7. Score Display

Color-coded risk level box (Green = Safe, Yellow = Suspicious, Red = Dangerous)

“Why flagged” reasons displayed with bullet points.

8. JSON Validator (brandList.json)

Match user-pasted domain with verified bank domains (e.g. maybank2u.com.my)

Show ✔️ if matched, ⚠️ if not

9. Dashboard Mock Page (Optional)

Create /dashboard.html

Display recent scan summary and most flagged sources

🔧 REPLIT TASKS
Initialize a Vite project with:

bash
Copy
Edit
npm create vite@latest
Install OpenAI SDK (or use fetch):

bash
Copy
Edit
npm install dotenv openai
Create .env file and store:

ini
Copy
Edit
OPENAI_API_KEY=sk-xxxxx
Use fetch() in ai.js with authorization header:

js
Copy
Edit
fetch("https://api.openai.com/v1/chat/completions", {
  method: "POST",
  headers: {
    Authorization: `Bearer ${OPENAI_API_KEY}`,
    "Content-Type": "application/json"
  },
  body: JSON.stringify({...})
});
🔄 GITHUB & VERCEL DEPLOYMENT GUIDE
1. Push to GitHub:

From Replit terminal:

bash
Copy
Edit
git init
git add .
git commit -m "Initial PaySavvy MVP"
git remote add origin https://github.com/your-username/paysavvy.git
git push -u origin master
2. Deploy to Vercel:

Go to https://vercel.com

Import from GitHub

Set environment variable OPENAI_API_KEY

Click "Deploy"

🧪 Test Cases
Use the following to test:

URL	Expected Result
https://mayb4nk-login.tk/login	Dangerous
https://www.maybank2u.com.my	Safe
https://du1tn0w-com.prize.ru	Suspicious
(offline mode)	Fallback only

✅ Requirements Fulfilled
Outcome	Implementation Proof
Break Down Silos	Country detection + brand mismatch alerts
24/7 Uptime	Offline regex-only mode
Personalized Experience	Bank preferences + BM/EN UI
Ecosystem Compatibility	Local bank domain validator
Trust & Simplicity	Color-coded output + “Why flagged” section

✨ Optional Add-Ons (Stretch Goals)
Add Firebase logging for scam reports

Heatmap UI (simulated with static map + JSON)

Chrome extension version

🏁 Final Output Description (for README.md)
PaySavvy is Malaysia’s first real-time scam link scanner powered by AI and regex pattern logic. It detects fake payment links from banks or wallets and gives you a clear explanation of risk. Designed for local users, it works offline and online — and scales to fintech and government needs.

✅ Replit Instructions
✅ Build in Replit
✅ Push to GitHub
✅ Deploy to Vercel
✅ Share live demo in your README

Let’s start coding!

yaml
Copy
Edit

---

Would you like:
- A working starter template in `.zip`?
- A complete generated GitHub `README.md` to match this?
- A companion `.env.example`?

Let me know — and I’ll prep it!